// win32 Visual C 컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include <string.h>
#include <windows.h>
#include <time.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

#define CLS system("cls")
#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
#define SUBMIT 4

BOOL is_err = FALSE;

void DB_connect();
void sql_error(char *msg);
void readFileIOput(char *path);

void init(); // DOS 창 크기
void titleDraw(); // 타이틀
void textcolor(int foreground, int background); // 글씨 색
int menuDraw(int num, int outNum); // 메뉴
void gotoxy(int, int); // 텍스트 위치
int keyControl(); // 키보드 이동

void enrollReservation(); // 예약자 등록
void adjustRoomPrice();   // 객실 가격 조정
void residualSeat();   // 정원 확인
void deleteSchedule();   // 일정 동기화
void refundPrice();      // 환불 가격 조회
void receipt();         // 정산내역

void selectConvenience();   // 조회
void insertConvenience();   // 삽입
void updateConvenience();   // 수정
void deleteConvenience();   // 삭제

void handle_insert_error();   // 에러처리
void handle_delect_error();   // 에러처리

EXEC SQL BEGIN DECLARE SECTION;
   //로그인
   VARCHAR uid[80];
   VARCHAR pwd[20];

   //1
   int facility_num;
   int ship_num;
   int rest_count;
   int store_count;
   int cinema_count;
   int v_cost;
   int v_sail_number;

   //2
   int v_ship_number;
   char v_ship_name[30];
   char v_ship_scale[30];

   // 숙박(accommodation) 테이블 속성
   int vf_customer_number;
   char vf_room_number[9];
   int v_boarding_area;
   int v_sailing_area;

   // 객실(room) 테이블 속성
   char v_room_number[9];
   char v_room_grade[12];
   int v_room_headcount;
   int v_room_cost;

   //객실 당 현재 인원수 
   int v_room_count;

   //운행(sail) 테이블 속성
   int v_sail_number;
   int vf_ship_number;
   char v_departure[20];
   char v_desrination[20];
   int v_sailing_day;
   char v_sailing_period[10];

   //운행 정보당 예약 인원 수
   int v_customer_count;
   short v_ship_number_ind;
   short v_ship_name_ind;
   short v_ship_scale_ind;
   short vf_customer_number_ind;
   short vf_room_number_ind;
   short v_boarding_area_ind;
   short v_sailing_area_ind;
   short v_room_number_ind;
   short v_room_grade_ind;
   short v_room_headcount_ind;

   //고객(customer) 테이블 속성
   char v_customer_name[10];
   char v_customer_phone_number[20];
   int i_customer_number;

   int v_date_count;
   int v_sail_num;
   int vf_sail_number;

   //go

   int i_customer_number;
    int i_sail_number;
    char v_departure[20];
    char v_desrination [20];
    int choice_sail_number;
    int choice_customer_number;
    int boarding_date;
    int sailing_date;
    int total_cost;
    int room_cost;
    int jumin_f;
    int jumin_b;
   

   //환불 요청 날짜
    int refund_date;

   // 변경 값
   int value;
   
   int v_room_number_count;



EXEC SQL END DECLARE SECTION;

#define getch()  _getch()

void main() {

   DB_connect();
   init();

   while(1){
      titleDraw();
      int menuNum = menuDraw(5,1);
      if(menuNum == 0){         // 1. 숙박 관리
         menuNum = menuDraw(2,2);
         if(menuNum == 0){      // 2. 예약자 등록
            enrollReservation();
         }else if(menuNum == 2){   // 2. 환불 가격 조회
            refundPrice();
         }
      }else if(menuNum == 2){      // 1. 객실 관리
         menuNum = menuDraw(1,3);
         if(menuNum == 0){      // 2. 객실 가격 조정
            adjustRoomPrice();
         }
      }else if(menuNum == 4){      // 1. 운행 관리
         menuNum = menuDraw(3,4);
         if(menuNum == 0){      // 2. 운행 동기화
            deleteSchedule();
         }else if(menuNum == 2){   // 2. 정원 확인
            residualSeat();
         }else if(menuNum == 4){   // 2. 정산 내역
            receipt();
         }
      }else if(menuNum == 6){      // 1. 부대시설
         menuNum = menuDraw(4,5);
         if(menuNum == 0){      // 2. 조회
            selectConvenience();
         }else if(menuNum == 2){   // 2. 삽입
            insertConvenience();
         }else if(menuNum == 4){   // 2. 수정
            updateConvenience();
         }else if(menuNum == 6){   // 2. 삭제
            deleteConvenience();
         }
      }else if(menuNum == 8){      // 1. 종료
         return 0;
      }
   }
   getch();
}

void DB_connect() {
   strcpy((char *)uid.arr, "zstA4@//sedb.deu.ac.kr:1521/orcl");
   uid.len = (short) strlen((char *)uid.arr);
   strcpy((char *)pwd.arr, "password");
   pwd.len = (short) strlen((char *)pwd.arr);
   
   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

   if(sqlca.sqlcode != 0 && sqlca.sqlcode != -1405) { //connect
      printf("\7Connect error: %s ",sqlca.sqlerrm.sqlerrmc);
      getch(); 
      exit(-1);
   }
}

void sql_error(char *msg) {
   char err_msg[128];      size_t buf_len, msg_len;
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   printf("\n%s\n",msg);      
   buf_len = sizeof(err_msg);
   sqlglm(err_msg, &buf_len, &msg_len);   
   printf("%.*s\n",msg_len,err_msg);
   getch();
   EXEC SQL ROLLBACK WORK;
   exit(-1);
}

void readFileIOput(char *path)
{
   FILE *pFile = NULL;
   char abPath[100] = "";
   strcat(abPath,"description/");
   strcat(abPath,path);
   strcat(abPath,".txt");
   pFile = fopen(abPath,"r");

   if(pFile != NULL)
   {
   char strTemp[255];
   char *pStr;

   while(!feof(pFile))
   {
      pStr = fgets(strTemp, sizeof(strTemp), pFile);
      printf("%s",pStr);
   }
   fclose(pFile);
   }
}

void init()
{
   system("mode con:cols=79 lines=36"); // 해상도 설정
   system("title 하이고");             // 제목 설정

   HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE); // 커서 숨기기
   CONSOLE_CURSOR_INFO ConsoleCursor;
   ConsoleCursor.bVisible = 0;
   ConsoleCursor.dwSize = 1;
   SetConsoleCursorInfo(consoleHandle, &ConsoleCursor);
}

void titleDraw()
{
   gotoxy(0,0);
   textcolor(15, 0);
   readFileIOput("wall");
   gotoxy(0,9);
   textcolor(15, 0);
   readFileIOput("wall2");
   gotoxy(0,2);
   textcolor(1, 0);
   readFileIOput("higo");
   gotoxy(0,28);
   textcolor(15, 0);
   readFileIOput("lighthouse");
   gotoxy(0,28);
   textcolor(6, 0);
   readFileIOput("light");
    gotoxy(0,30);
   textcolor(15, 0);
   readFileIOput("ship");
   gotoxy(0,35);
   textcolor(1, 0);
   readFileIOput("water");
   gotoxy(0,26);
   textcolor(8,0);
   readFileIOput("smoke");

   textcolor(9, 0);

}

int menuDraw(int num, int outNum) // 출력문 개수, 출력문 번호
{
   titleDraw();
   int x = 35;
   int y = 14;
   int yPos = 14;
   textcolor(9, 0);

   if(outNum == 1){
      gotoxy(x-2, y);
      printf("> 숙박 관리");
      gotoxy(x, y+2);
      printf("객실 관리");
      gotoxy(x, y+4);
      printf("운행 관리");
      gotoxy(x, y+6);
      printf("부대시설 관리");
      gotoxy(x, y+8);
      printf("종료");
   }else if(outNum == 2){
      gotoxy(x-2, y);
      printf("> 예약자 등록");
      gotoxy(x, y+2);
      printf("환불 가격 조회");
   }else if(outNum == 3){
      gotoxy(x-2, y);
      printf("> 객실 가격 조정");
   }else if(outNum == 4){
      gotoxy(x-2, y);
      printf("> 운행 동기화");
      gotoxy(x, y+2);
      printf("정원 확인");
      gotoxy(x, y+4);
      printf("정산 내역");
      gotoxy(x, y+6);
   }else if(outNum == 5){
      gotoxy(x-2, y);
      printf("> 조회");
      gotoxy(x, y+2);
      printf("삽입");
      gotoxy(x, y+4);
      printf("수정");
      gotoxy(x, y+6);
      printf("삭제");
   }


   while(1){
      int n = keyControl();
      switch(n){
         case UP:{
            if(y > yPos){
               gotoxy(x-2,y);
               printf(" ");
               y-=2;
               gotoxy(x-2,y);
               printf(">");
            }
            break;
         }
         case DOWN:{
            if(y < yPos + 2 * (num - 1)){
               gotoxy(x-2,y);
               printf(" ");
               y+=2;
               gotoxy(x-2,y);
               printf(">");
            }
            break;
         }
         case SUBMIT:{
            return y - yPos;
         }
      }
   }

}

void textcolor(int foreground, int background) 
{ 
   int color=foreground+background*16; 
   SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color); 
}

void gotoxy(int x, int y)
{
   HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
   COORD pos;
   pos.X = x;
   pos.Y = y;
   SetConsoleCursorPosition(consoleHandle, pos);
}

int keyControl()
{
   char temp = getch();

   if(temp == 'w' || temp == 'W'){
      return UP;
   }else if(temp == 'a' || temp == 'w'){
      return LEFT;
   }else if(temp == 's' || temp == 'S'){
      return DOWN;
   }else if(temp == 'd' || temp == 'D'){
      return RIGHT;
   }else if(temp == ' '){
      return SUBMIT;
   }
}

void handle_insert_error() {
   gotoxy(25, 17);
   is_err = TRUE;
   printf("데이터 무결성에 위배됩니다.");
}

void handle_delect_error() {
   gotoxy(25, 17);
   is_err = TRUE;
   printf("데이터 삭제시 오류가 발생합니다.");
}

void enrollReservation()
{
   titleDraw();
   int x = 30;
   int y = 13;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("승객 번호 : ");
   gotoxy(x, y+2);
   printf("객실 번호 : ");
   gotoxy(x, y+4);
   printf("운행 번호 : ");
   gotoxy(x, y+6);
   printf("출발지 : ");
   gotoxy(x, y+8);
   printf("도착지 : ");

   int customerNum = 0;
   int sailNum = 0;
   char roomNum[100] = "";
   int start = 0;
   int end = 0;

   gotoxy(x+12,y);
   scanf("%d",&customerNum);
   gotoxy(x+12,y+2);
   scanf("%s",&roomNum);
   gotoxy(x+10,y+4);
   scanf("%d",&sailNum);
   gotoxy(x+10,y+6);
   scanf("%d",&start);
   gotoxy(x+10,y+8);
   scanf("%d",&end);
   
   vf_customer_number = customerNum;
   strcpy(v_room_number, roomNum);
   strcpy(vf_room_number, roomNum);
   vf_sail_number = sailNum;
   v_boarding_area = start;
   v_sailing_area = end;

   // 객실에서 최대인원수 가져오기
   EXEC SQL SELECT ROOM_NUMBER, ROOM_GRADE, ROOM_HEADCOUNT, ROOM_COST INTO :v_room_number, :v_room_grade, :v_room_headcount, :v_room_cost FROM room WHERE ROOM_NUMBER like :v_room_number;

   // 숙박에서 현재 인원수 가져오기
   EXEC SQL SELECT count(CUSTOMER_NUMBER) INTO :v_room_count FROM accommodation WHERE ROOM_NUMBER like :vf_room_number;

   // 존재 하지 않는 데이터 구별
   EXEC SQL SELECT a.sail_number INTO :v_sail_num from accommodation a, Berth b Where a.sail_number = b.sail_number and boarding_area = :v_boarding_area and sailing_area = :v_sailing_area and room_number = :vf_room_number;
   if(v_room_count >= v_room_headcount) {
      titleDraw();
      gotoxy(14, 17);
      printf("해당 객실에 인원 수가 초과되어서 삽입할 수 없습니다.");
   }
   else {
      titleDraw();
      EXEC SQL WHENEVER SQLERROR DO handle_insert_error();
      EXEC SQL INSERT INTO accommodation(CUSTOMER_NUMBER, ROOM_NUMBER, BOARDING_AREA, SAILING_AREA, SAIL_NUMBER) VALUES (:vf_customer_number, :vf_room_number, :v_boarding_area, :v_sailing_area, :vf_sail_number); 
      EXEC SQL COMMIT WORK;
      if(!is_err){
         gotoxy(25, 17);
         printf("삽입이 정상 완료되었습니다.");
      }   
   }

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void deleteSchedule()
{
   titleDraw();
   int x = 30;
   int y = 14;
   textcolor(9, 0);

   gotoxy(x-5, y);
   printf("몇일 기준으로 삭제를 원하시나요? ");

   gotoxy(x, y+4);
   printf("날짜 : ");

   char date[100] = "";

   gotoxy(x+12,y+4);
   scanf("%s",date);

   strcpy(v_sailing_period, date);
   EXEC SQL SELECT COUNT(*) INTO :v_date_count FROM SAIL WHERE SAILING_PERIOD <= TO_DATE(:v_sailing_period,'YY/MM/DD');
   EXEC SQL DELETE FROM sail WHERE SAILING_PERIOD <= TO_DATE(:v_sailing_period,'YY/MM/DD');
   EXEC SQL COMMIT WORK;
   titleDraw();
   gotoxy(x-5,y+3);
   printf("%d개의 데이터가 삭제되었습니다.", v_date_count);

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void residualSeat()
{
   titleDraw();
   int x = 30;
   int y = 14;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("운행 번호 : ");

   int sailNum = 0;
   
   gotoxy(x+12,y);
   scanf("%d",&sailNum);

   v_sail_number = sailNum;

   EXEC SQL SELECT SHIP_SCALE INTO :v_ship_scale FROM cruiseship c, sail s WHERE c.SHIP_NUMBER = s.SHIP_NUMBER and SAIL_NUMBER = :v_sail_number;
   EXEC SQL SELECT COUNT(*) INTO :v_customer_count FROM accommodation WHERE SAIL_NUMBER = :v_sail_number;
   char *ptr = strtok(v_ship_scale, " "); 
      titleDraw();
   gotoxy(25,17);
   if(!strcmp(ptr, "CASUAL")) {
      printf("탑승인원 50명 중 %d명 예약 됨",v_customer_count);
   }
   else if(!strcmp(ptr, "PREMIUM")) {
      printf("탑승인원 100명 중 %d명 예약 됨",v_customer_count);
   }
   else if(!strcmp(ptr, "LUXURY")) {
      printf("탑승인원 150명 중 %d명 예약 됨",v_customer_count);
   }
   else {
      printf("검색 결과가 없음");
   }

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }

}

void refundPrice()
{
   titleDraw();
   int x = 30;
   int y = 14;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("고객 번호 : ");
   gotoxy(x, y+2);
   printf("운행 번호 : ");

   int choice_customer_number = 0;
   int choice_sail_number = 0;
   
   gotoxy(x+12,y);
   scanf("%d",&choice_customer_number);
   gotoxy(x+12,y+2);
   scanf("%d",&choice_sail_number);

   titleDraw();

   EXEC SQL SELECT substr(BERTH_DATE,1,2) INTO :boarding_date 
   from BERTH b, SAIL s, accommodation a 
   where b.SAIL_NUMBER  = s.SAIL_NUMBER and s.sail_number =:choice_sail_number and b.BERTH_NUMBER = a.boarding_area and a.customer_number = :choice_customer_number;

   EXEC SQL SELECT substr(BERTH_DATE,1,2) INTO :sailing_date 
   from BERTH b, SAIL s, accommodation a 
   where b.SAIL_NUMBER  = s.SAIL_NUMBER and s.sail_number =:choice_sail_number and b.BERTH_NUMBER = a.sailing_area and a.customer_number = :choice_customer_number;

   EXEC SQL SELECT room_cost INTO :room_cost
   from room 
   where room_number in (select room_number from accommodation a where a.customer_number = :choice_customer_number);

   total_cost = room_cost *(sailing_date-boarding_date);

   EXEC SQL SELECT to_number(substr(customer_jumin_number, 1, 2)) INTO :jumin_f
   from customer
   where customer_number = :choice_customer_number;
      
   EXEC SQL SELECT to_number(substr(customer_jumin_number, 8,1)) INTO :jumin_b
   from customer
   where customer_number = :choice_customer_number;

   if(jumin_f < 54 && jumin_b < 3){
      total_cost = room_cost *(sailing_date-boarding_date) * 0.9;
      gotoxy(16,15);
      printf("  %d원 X %d일 우대 고객 10퍼센트 할인 적용\n", room_cost, sailing_date-boarding_date);
   }else{
      total_cost = room_cost *(sailing_date-boarding_date);
      gotoxy(24,15);
      printf("  %d원 X %d일 일반 고객\n", room_cost, sailing_date-boarding_date);
   }

   time_t t = time(NULL);
   struct tm tm = *localtime(&t);

   refund_date = tm.tm_mday - boarding_date;
    gotoxy(6,17);
   printf("오늘 날짜(%d-%d-%d)를 기준으로 %d 일 전에 환불을 요청하셨습니다. \n", tm.tm_year+1900, tm.tm_mon+1, tm.tm_mday, abs(refund_date));
   if(abs(refund_date)>7){
      gotoxy(28,20);
      printf("전액 환불 : %d원 \n", total_cost);
   }
   else if(4<abs(refund_date)<8){
      gotoxy(28,19);
      printf("60% 환불 : %d원 \n", total_cost*0.6);
   }else if(2<abs(refund_date)<6 ){
      gotoxy(28,19);
      printf("30 환불 : %d원 \n", total_cost*0.6);
   }else{
      gotoxy(28,19);
      printf("환불 불가 입니다. \n");
   }

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void insertConvenience()
{

   titleDraw();
   int x = 30;
   int y = 14;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("시설 번호 : ");
   gotoxy(x, y+2);
   printf("배 번호 : ");
   gotoxy(x, y+4);
   printf("음식 개수 : ");
   gotoxy(x, y+6);
   printf("편의점 개수 : ");
   gotoxy(x, y+8);
   printf("영화관 개수 : ");

   gotoxy(x+16,y);
   scanf("%d",&facility_num);
   gotoxy(x+16,y+2);
   scanf("%d",&ship_num);
   gotoxy(x+16,y+4);
   scanf("%d",&rest_count);
   gotoxy(x+16,y+6);
   scanf("%d",&store_count);
   gotoxy(x+16,y+8);
   scanf("%d",&cinema_count);

   EXEC SQL INSERT INTO conveniencefacility VALUES(:facility_num,:ship_num,:rest_count,:store_count,:cinema_count);
   EXEC SQL COMMIT WORK;

   selectConvenience();

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }

}

void updateConvenience()
{

   titleDraw();
   int x = 30;
   int y = 16;
   textcolor(9, 0);

   gotoxy(x, y-1);
   printf("시설 번호 : ");

   int category = 0;

   gotoxy(x-23, y+1);
   printf("음식점 (1) 편의점 (2) 영화관 (3) : ");

   gotoxy(x, y+3);
   printf("변경 값 : ");

   gotoxy(x+16,y-1);
   scanf("%d",&facility_num);
   gotoxy(x+16,y+1);
   scanf("%d",&category);
   gotoxy(x+16,y+3);
   scanf("%d",&value);

   if(category == 1){
      EXEC SQL UPDATE conveniencefacility SET restaurant_count = :value WHERE facility_number = :facility_num;
   }
   else if(category == 2){
      EXEC SQL UPDATE conveniencefacility SET store_count = :value WHERE facility_number = :facility_num;
   }
   else if(category == 3){
      EXEC SQL UPDATE conveniencefacility SET cinema_count = :value WHERE facility_number = :facility_num;
   }

   EXEC SQL COMMIT WORK;

   selectConvenience();

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void deleteConvenience()
{
   titleDraw();
   int x = 30;
   int y = 16;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("시설 번호 : ");

   gotoxy(x+16,y);
   scanf("%d",&facility_num);
   
   EXEC SQL DELETE conveniencefacility WHERE facility_number = :facility_num;
   EXEC SQL COMMIT WORK;

   selectConvenience();

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void adjustRoomPrice()
{
   int count = 2;
   int pre_cost;
   titleDraw();
   int x = 30;
   int y = 14;
   textcolor(9, 0);

   gotoxy(x, y);
   printf("선박 규모 : ");
   gotoxy(x, y+2);
   printf("객실 등급 : ");
   gotoxy(x, y+4);
   printf("조정 값 : ");

   char shipSize[100] = "";
   char roomRank[100] = "";
   int adjustValue = 0;

   gotoxy(x+12,y);
   scanf("%s",&shipSize);
   gotoxy(x+12,y+2);
   scanf("%s",&roomRank);
   gotoxy(x+10,y+4);
   scanf("%d",&adjustValue);

   strcpy(v_ship_scale, shipSize);
   strcpy(v_room_grade, roomRank);

   EXEC SQL Select COUNT(r.room_number) INTO :v_room_number_count FROM cruiseship c, sail s, accommodation a, room r WHERE c.ship_number = s.ship_number and s.SAIL_NUMBER = a.SAIL_NUMBER and a.room_number=r.room_number and ship_scale like :v_ship_scale and room_grade like :v_room_grade;

   if(v_room_number_count > 0 ){
      EXEC SQL DECLARE room CURSOR FOR
      Select r.room_number, room_grade, room_headcount, room_cost FROM cruiseship c, sail s, accommodation a, room r WHERE c.ship_number = s.ship_number and s.SAIL_NUMBER = a.SAIL_NUMBER and a.room_number=r.room_number and ship_scale like :v_ship_scale and room_grade like :v_room_grade;

      EXEC SQL OPEN room;

      EXEC SQL WHENEVER NOT FOUND DO BREAK;

      titleDraw();
      gotoxy(2,12);
      printf("|   배 규모   |   방 번호   |   방 등급   |   이전 가격   |   현재 가격   |");

      int pre_cost;
      for(;;){
         EXEC SQL FETCH room into 
         :v_room_number,
         :v_room_grade,
         :v_room_headcount,
         :v_room_cost; 
   
         pre_cost = v_room_cost;
         v_room_cost = v_room_cost + (v_room_cost * adjustValue/100);
         EXEC SQL UPDATE room SET ROOM_COST = :v_room_cost WHERE ROOM_NUMBER like :v_room_number;
         EXEC SQL COMMIT WORK;
         gotoxy(2,13+count);
         count++;
         printf("     %s       %s     %s      %d         %d\n", v_ship_scale,v_room_number,v_room_grade,pre_cost,v_room_cost);

      }
      EXEC SQL CLOSE room;
   }
   else {
      titleDraw();
      gotoxy(26, 17);
      printf("존재하는 데이터가 없습니다.");
   }

   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }

}

void receipt()
{
   int count = 2;

   EXEC SQL DECLARE cur2 CURSOR FOR
      select cost, s.sail_number, s.sailing_period from (select sum(total_cost) cost, sail_number from accommodation group by SAIL_NUMBER) a, sail s where s.SAIL_NUMBER = a.sail_number;
   EXEC SQL OPEN cur2;

   titleDraw();
   gotoxy(2,12);
   printf("  |       총 수입금        |        배넘버        |        기간        |");
   while(1){
      EXEC SQL FETCH cur2 into :v_cost, :v_sail_number, :v_sailing_period;
      if(sqlca.sqlcode == 1403) break;
      gotoxy(2, 12+count);
      printf("           %d                   %d               %s \n",v_cost, v_sail_number, v_sailing_period);
      count++;
   }
   EXEC SQL CLOSE cur2;
   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }
}

void selectConvenience()
{
   int count = 2;

   EXEC SQL DECLARE cur CURSOR FOR
      select facility_number, ship_number, restaurant_count, store_count, cinema_count from conveniencefacility;
   EXEC SQL OPEN cur;
   EXEC SQL WHENEVER NOT FOUND DO break;
   titleDraw();
   gotoxy(2,12);
   printf("| 배 번호  |  시설 번호  |  레스토랑 개수  |  편의점 개수  |  영화관 개수 | ");
   while(1){
      EXEC SQL FETCH cur into :facility_num, :ship_num, :rest_count, :store_count, :cinema_count;
      gotoxy(2, 12+count);
      printf("%8d%12d%15d%17d%16d \n",ship_num,facility_num, rest_count, store_count, cinema_count);
      count++;
   }
   EXEC SQL CLOSE cur;
   while(1){
      int n = keyControl();
      if(n == SUBMIT)
         break;
   }

}